pip install torch torchvision pillow
import torch
import torch.optim as optim
import torchvision.transforms as transforms
import torchvision.models as models
from PIL import Image
import matplotlib.pyplot as plt
def load_image(image_path, max_size=400, shape=None):
    image = Image.open(image_path)
    size = max_size if max(image.size) > max_size else max(image.size)
    if shape is not None:
        size = shape
    in_transform = transforms.Compose([
        transforms.Resize((size, size)),
        transforms.ToTensor(),
        transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))
    ])
    image = in_transform(image).unsqueeze(0)
    return image

content_image = load_image('path_to_content_image.jpg')
style_image = load_image('path_to_style_image.jpg', shape=content_image.shape[-2:])
def get_features(image, model, layers=None):
    if layers is None:
        layers = {
            '0': 'conv1_1',
            '5': 'conv2_1',
            '10': 'conv3_1',
            '19': 'conv4_1',
            '21': 'conv4_2',  # content representation
            '28': 'conv5_1'
        }
    features = {}
    x = image
    for name, layer in model.def content_loss(target, content):
    return torch.mean((target - content) ** 2)

def gram_matrix(tensor):
    _, d, h, w = tensor.size()
    tensor = tensor.view(d, h * w)
    gram = torch.mm(tensor, tensor.t())
    return gram

def style_loss(target, style):
    target_gram = gram_matrix(target)
    style_gram = gram_matrix(style)
    return torch.mean((target_gram - style_gram) ** 2)_modules.items():
        x = layer(x)
        if name in layers:
            features[layers[name]] = x
    return features

vgg = models.vgg19(pretrained=True).features
for param in vgg.parameters():
    param.requires_grad_(False)
vgg.to('cuda' if torch.cuda.is_available() else 'cpu')
def style_transfer(vgg, content_image, style_image, steps=2000, style_weight=1e6, content_weight=1):
    content_features = get_features(content_image, vgg)
    style_features = get_features(style_image, vgg)
    target = content_image.clone().requires_grad_(True).to('cuda' if torch.cuda.is_available() else 'cpu')
    optimizer = optim.Adam([target], lr=0.003)
    for step in range(steps):
        target_features = get_features(target, vgg)
        content_loss_value = content_loss(target_features['conv4_2'], content_features['conv4_2'])
        style_loss_value = 0
        for layer in style_features:
            style_loss_value += style_loss(target_features[layer], style_features[layer])
        total_loss = content_weight * content_loss_value + style_weight * style_loss_value
        optimizer.zero_grad()
        total_loss.backward()
        optimizer.step()
        if step % 100 == 0:
            print('Step {}: Total loss: {}'.format(step, total_loss.item()))
    return target

output = style_transfer(vgg, content_image, style_image)
def im_convert(tensor):
    image = tensor.to("cpu").clone().detach()
    image = image.numpy().squeeze()
    image = image.transpose(1, 2, 0)
    image = image * (0.229, 0.224, 0.225) + (0.485, 0.456, 0.406)
    image = image.clip(0, 1)
    return image

plt.figure(figsize=(10, 10))
plt.imshow(im_convert(output))
plt.show()
